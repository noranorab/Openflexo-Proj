use org.openflexo.technologyadapter.xml.XMLModelSlot as XML;

import org.openflexo.technologyadapter.xml.model.typed.XMLModel;
import org.openflexo.technologyadapter.xml.metamodel.XSDMetaModel;
import org.openflexo.technologyadapter.xml.model.typed.XMLIndividual;
import org.openflexo.technologyadapter.xml.metamodel.XMLComplexType;
import java.lang.String;

// XSD files import
import XSDMetaModel HEPTANE_WCET from ["http://mem4csd.telecom-paris.fr/HeptaneWCET"];
import XSDMetaModel OTAWA_CACHE from ["http://mem4csd.telecom-paris.fr/OtawaCache"];
import XSDMetaModel OTAWA_MEMORY from ["http://mem4csd.telecom-paris.fr/OtawaMemory"];

// The complex types found in XSD files
import XMLComplexType HEPTANE_CACHE_TYPE from [HEPTANE_WCET:"HeptaneCacheType"];
import XMLComplexType DCACHE_TYPE from [OTAWA_CACHE:"dcache"];

// Types beeing made available at FML level, built using XSD types found in XSD files

typedef XMLIndividualType(xsdType=HEPTANE_CACHE_TYPE) as HCache;
typedef XMLIndividualType(xsdType=DCACHE_TYPE) as DCache;

/**
 * This virtual model defines the federation of two XML files :
 * - heptane XML file
 * - Otawa cache file
 */
@URI("file:/C:/Users/PC/Desktop/TelecomParis/internship%202A/Model4.fml")
model Model4 {
   // The two model slots defining links to XML files
   XMLModel heptane with XMLModelSlot(metaModel=HEPTANE_WCET);
   XMLModel otawa with XMLModelSlot(metaModel=OTAWA_CACHE);

   // A basic constructor based on the explicit given of the two resources
   create(Resource<XMLModel> heptaneResource, Resource<XMLModel> otawaResource) {
      connect heptane using parameters.heptaneResource;
      connect otawa using  parameters.otawaResource;
      // Call the synchronization at the end of constructor, to initialize instances
      this.synchronize();
   }

   /*XMLIndividual hCache with XMLIndividualRole(container=this,xsdType=null);
   HCache hcacheProperty  {
      HCache get() {
         return hCache;
      }
      set(HCache value) {
         hCache = value;
      }
   };
   XMLIndividual cacheconfig with XMLIndividualRole(container=this);
   XMLModel otawaSlotMemory with XMLModelSlot(metaModel=null);*/

   /*synchronizationScheme() with  {
   }*/

   /**
    * A concept demonstrating link etablishment beween cache in Heptane and cache in Otawa
    */
   public concept Cache {

      HCache hCache with XMLIndividualRole(container=heptane,xsdType=HEPTANE_CACHE_TYPE);
      DCache dCache with XMLIndividualRole(container=otawa,xsdType=DCACHE_TYPE);

      // If we have only the Heptane instance
      create::initFromHCache(HCache anHCache) {
         hCache = parameters.anHCache;
      }

      create::createFromBoth(HCache h, DCache d) { 
         hCache = parameters.h; 
         dCache = parameters.d; 
      }

      delete::performDelete() {
      }
      /*create::add(required int nbsets, required int nbways, required int cachelinesize, required String type, required String replacement_policy, required String level, required String latency) {
      }*/
   }

   // This method synchronize instances of Cache with all instances found in Heptane file
   // I don't know yet "semantic rule" to be used to establish correspondances between instances
   public synchronize() {
      MatchingSet<Cache> matchingSet = begin match Cache from this;

      log "matchingSet=" + matchingSet;
      /*

      //log "matchingSet=" + matchingSet;

      for (HCache iteratedHCache : select HCache from heptane) {
          log " >>> " + iteratedHCache;
          match Cache
               in matchingSet from this 
               where (hCache=iteratedHCache) create::initFromHCache(iteratedHCache);
      }

      */
      for (HCache h : select HCache from heptane) {
         Boolean matched = false;


         for (DCache d : select DCache from otawa) {

            // Heptane <-> OTAWA rule via log2 (use bit-shifts)
            int h_nbsets        = h.nbsets;
            int h_nbways        = h.nbways;
            int h_cachelinesize = h.cachelinesize;
            int h_latency       = h.latency;
      
            int d_row_bits     = d.rowBits;
            int d_way_bits     = d.wayBits;
            int d_block_bits   = d.blockBits;
            int d_miss_penalty = d.missPenalty;
      
            int calc_nbsets        = 1 << d_row_bits;
            int calc_nbways        = 1 << d_way_bits;
            int calc_cachelinesize = 1 << d_block_bits;
      
            if ( h_nbsets == calc_nbsets && h_nbways == calc_nbways && h_cachelinesize == calc_cachelinesize && h_latency == d_miss_penalty ) {
      
              match Cache
                in matchingSet from this
                where (hCache=h,dCache=d)
                create::createFromBoth(h,d);
      
              matched = true;
            }
         }

         // If no OTAWA partner, keep at least the Heptane-side instance
         if (!matched) {
            match Cache
               in matchingSet from this
               where (hCache=h)
               create::initFromHCache(h);
         }
      }

      end match Cache in matchingSet delete::performDelete();

   }
}
