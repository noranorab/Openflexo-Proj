use org.openflexo.technologyadapter.xml.XMLModelSlot as XML;

import org.openflexo.technologyadapter.xml.model.typed.XMLModel;
import org.openflexo.technologyadapter.xml.model.typed.XMLIndividual;
import org.openflexo.technologyadapter.xml.metamodel.XSDMetaModel;
import org.openflexo.technologyadapter.xml.metamodel.XMLComplexType;

import XSDMetaModel HEPTANE_WCET from ["http://mem4csd.telecom-paris.fr/HeptaneWCET"];
import XMLComplexType CONFIGURATION from [HEPTANE_WCET:"CONFIGURATION"];
import XMLComplexType ARCHITECTURE from [HEPTANE_WCET:"ARCHITECTURE"];
import XMLComplexType HEPTANE_CACHE_TYPE from [HEPTANE_WCET:"HeptaneCacheType"];

@URI("file:/C:/Users/PC/Desktop/TelecomParis/internship%202A/Model3.fml")
@Author("PC")
public model Model3 {
   XMLModel heptaneSlot with XMLModelSlot(metaModel=HEPTANE_WCET,container=this);
   
   XMLIndividualType(xsdType=CONFIGURATION) CONFIGURATION with XMLIndividualRole(container=heptaneSlot,xsdType=CONFIGURATION);
   XMLIndividualType(xsdType=ARCHITECTURE) ARCHITECTURE with XMLIndividualRole(container=heptaneSlot,xsdType=ARCHITECTURE);

   sync(XMLIndividualType(xsdType=HEPTANE_CACHE_TYPE) type) with  {
      
      List<type> xmlCache = select type from heptaneSlot;
      for (item : xmlCache) {
         match CacheConcept from this create::_create(item);
      }
   }

   public concept CacheConcept {
      XMLIndividualType(xsdType=HEPTANE_CACHE_TYPE) hCache with XMLIndividualRole(container=this,xsdType=HEPTANE_CACHE_TYPE);
      org.openflexo.connie.type.UndefinedType@7c4e9bbb nbsets  {
         org.openflexo.connie.type.UndefinedType@7c4e9bbb get() {
            return this.nbsets;
         }
         set(org.openflexo.connie.type.UndefinedType@7c4e9bbb value) {
            this.nbsets = value;
         }
      };
      org.openflexo.connie.type.UndefinedType@7c4e9bbb nbways  {
         org.openflexo.connie.type.UndefinedType@7c4e9bbb get() {
            return this.nbways;
         }
         set(org.openflexo.connie.type.UndefinedType@7c4e9bbb value) {
            this.nbways = value;
         }
      };
      org.openflexo.connie.type.UndefinedType@7c4e9bbb cachelinesize  {
         org.openflexo.connie.type.UndefinedType@7c4e9bbb get() {
            return this.cachelinesize;
         }
         set(org.openflexo.connie.type.UndefinedType@7c4e9bbb value) {
            this.cachelinesize = value;
         }
      };
      org.openflexo.connie.type.UndefinedType@7c4e9bbb replacement_policy  {
         org.openflexo.connie.type.UndefinedType@7c4e9bbb get() {
            return this.replacement_policy;
         }
         set(org.openflexo.connie.type.UndefinedType@7c4e9bbb value) {
            this.replacement_policy = value;
         }
      };
      org.openflexo.connie.type.UndefinedType@7c4e9bbb type  {
         org.openflexo.connie.type.UndefinedType@7c4e9bbb get() {
            return this.type;
         }
         set(org.openflexo.connie.type.UndefinedType@7c4e9bbb value) {
            this.type = value;
         }
      };
      org.openflexo.connie.type.UndefinedType@7c4e9bbb level  {
         org.openflexo.connie.type.UndefinedType@7c4e9bbb get() {
            return this.level;
         }
         set(org.openflexo.connie.type.UndefinedType@7c4e9bbb value) {
            this.level = value;
         }
      };
      Void latency  {
         Void get() {
            this.latency;
         }
         set(Void value) {
            this.latency = value;
         }
      };
      create::_create(XMLIndividualType(xsdType=HEPTANE_CACHE_TYPE) cacheElt) {
         hCache = parameters.cacheElt;
      }
      delete() {
      }
   }
}
