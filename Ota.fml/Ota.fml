use org.openflexo.technologyadapter.xml.XMLModelSlot as XML;

import java.lang.Math;

import org.openflexo.technologyadapter.xml.model.typed.XMLModel;
import org.openflexo.technologyadapter.xml.metamodel.XSDMetaModel;
import org.openflexo.technologyadapter.xml.model.typed.XMLIndividual;
import org.openflexo.technologyadapter.xml.metamodel.XMLComplexType;

import XSDMetaModel OTAWA_MEMORY from ["http://mem4csd.telecom-paris.fr/OtawaMemory"];
import XSDMetaModel OTAWA_CACHE from ["http://mem4csd.telecom-paris.fr/OtawaCache"];
import XSDMetaModel OTAWA_PIPELINE from ["http://mem4csd.telecom-paris.fr/OtawaPipeline"];

import XMLComplexType PROCESSOR from [OTAWA_PIPELINE:"processor"];
import XMLComplexType STAGES from [OTAWA_PIPELINE:"stages"];
import XMLComplexType STAGE from [OTAWA_PIPELINE:"stage"];


import XMLComplexType DCACHE from [OTAWA_CACHE:"dcache"];
import XMLComplexType ICACHE from [OTAWA_CACHE:"icache"];


typedef XMLIndividualType(xsdType=ICACHE) as ICache;
typedef XMLIndividualType(xsdType=DCACHE) as DCache;


typedef XMLIndividualType(xsdType=PROCESSOR) as Processor;

@URI("file:/C:/Users/PC/Desktop/TelecomParis/internship%202A/Ota.fml")
@Author("PC")
public model Ota {
	XMLModel otawa_memory with XMLModelSlot(metaModel=OTAWA_MEMORY);
	XMLModel otawa_pipeline with XMLModelSlot(metaModel=OTAWA_PIPELINE);
	XMLModel otawa_cache with XMLModelSlot(metaModel=OTAWA_CACHE);

  Processor processor with XMLIndividualRole(container=pipeline,xsdType=PROCESSOR);
  ICache icache with XMLIndividualRole(container=otawa_cache, xsdType=ICACHE);
  DCache dcache with XMLIndividualRole(container=otawa_cache, xsdType=DCACHE);
  //OMemory oMemory    with XMLIndividualRole(container=memory, xsdType=MEMORY);
    XMLIndividual cacheConfig;
	
   
	create::_create(required Resource<XMLModel> cachesResource, required Resource<XMLModel> memoryResource, required Resource<XMLModel> pipelineResource) {
	 connect otawa_cache   using parameters.cachesResource;
    connect otawa_memory   using parameters.memoryResource;
    connect otawa_pipeline using parameters.pipelineResource;

    log "Caches: " + otawa_cache;
    log "Memory: " + otawa_memory;
    log "Pipeline: " + otawa_pipeline;

    processor = (Processor)otawa_pipeline.root;
    
    cacheConfig = (XMLIndividual)otawa_cache.root;
    //icache = (ICache)cacheConfig.getPropertyValue("icache");
    //dcache = (DCache)cacheConfig.getPropertyValue("dcache");

   

    //ICache icaches = (ICache) otawa_cache.root.getPropertyValue("icache");
    //DCache dcaches = (DCache) otawa_cache.root.getPropertyValue("dcache");
   


    
	
	}
  /*
  public listChildren() {
    for (XMLIndividual child : cacheConfig.children) {
      log "child tag = " + child.name;
    }
  }
  */
  public listAllXMLIndividualsInCaches() {
    for (XMLIndividual i : select XMLIndividual from otawa_cache) {
      log "XMLIndividual in caches: " + i;
    }
  }
  /*
  public syncICacheFromNumbers(int cachelinesize, int nbways, int nbsets, int miss_penalty) {
    
      icache.block_bits   = Math.log(cachelinesize)/Math.log(2);
      icache.way_bits     = Math.log(nbways)/Math.log(2);
      icache.row_bits     = Math.log(nbsets)/Math.log(2);
      icache.miss_penalty = Math.log(miss_penalty)/Math.log(2);
  
  }
  */
                                                                                                                                                                                                                                                                                                                                                                                                                                                        

	delete() {
		delete processor;
		delete icache;
		delete dcache;
		delete cacheConfig;
	}

 


   
}
